{
    "methods": {
        "Playlist": {
            "list": {
                "def": "Returns a collection of playlists.",
                "**Required** parameters": {
                    "part: PlaylistPartType": "Specifies what properties will be returned by the request."
                },
                "**Filters** (specify exactly one)": {
                    "id: list[str]|str": "The playlist ID/list of playlist IDs that will be returned.",
                    "channel_id: str": "Specifies a channel ID whose playlists will be returned.",
                    "mine: bool": "Specifies that the API should retrieve the playlists of the authorised user."
                },
                "**Optional** parameters": {
                    "max_results: int": "The maximum amount of items that will be returned.",
                    "page_token: str": "Identifies a specific page in the result set that should be returned. The `next_page_token` and `prev_page_token` are available in the returned list response for this parameter.",
                    "on_behalf_of_content_owner: str": "Indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value."
                },
                "return": "PlaylistListResponse",
                "ref": "https://developers.google.com/youtube/v3/docs/playlists/list"
            },
            "insert": {
                "def": "Creates a playlist.",
                "**Required** parameters": {
                    "body: [PlaylistResource](#playlistresource)": [
                        "The [`PlaylistResource`](#playlistresource) which specifies the details of this playlist.  ",
                        "**Values you are able to set**:",
                        "- `snippet.title` (Required)",
                        "- `snippet.description`",
                        "- `snippet.privacy_status`"
                    ],
                    "part: PlaylistPartType": "Identifies the attributes the method will set, and the attributes included in the response."
                },
                "**Optional** parameters": {
                    "on_behalf_of_content_owner: str": "Indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value."
                },
                "return": "PlaylistResource",
                "ref": "https://developers.google.com/youtube/v3/docs/playlists/insert"
            },
            "update": {
                "def": "Updates a playlist.",
                "**Required** parameters": {
                    "body: PlaylistResource": [
                        "The [`PlaylistResource`](#playlistresource) which specifies the details of this playlist.  ",
                        "**Values you are able to set**:",
                        "- `id` (Required)",
                        "- Otherwise, same as the above `insert` method.`"
                    ],
                    "part: PlaylistPartType": "Identifies the attributes the method will set, and the attributes included in the response."
                },
                "**Optional** parameters": {
                    "on_behalf_of_content_owner: str": "Indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value."
                },
                "return": "PlaylistResource",
                "ref": "https://developers.google.com/youtube/v3/docs/playlists/update"
            },
            "delete": {
                "def": "Deletes a playlist.",
                "**Required** parameters": {
                    "playlist_id: str": "The ID of the playlist that will be deleted."
                },
                "**Optional** parameters": {
                    "on_behalf_of_content_owner: str": "Indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value."
                },
                "ref": "https://developers.google.com/youtube/v3/docs/playlists/delete"
            }
        },
        "PlaylistItem": {
            "list": {
                "def": "Returns a collection of playlist items that match the API request parameters.",
                "**Required** parameters": {
                    "part: PlaylistItemPartType": "Specifies what properties will be returned by the request."
                },
                "**Filters** (specify exactly one)": {
                    "id: list[str]|str": "The ID/list of IDs of the playlist items that should be returned.",
                    "playlist_id: str": "The ID of the playlist whose videos will be retrieved."
                },
                "**Optional** parameters": {
                    "video_id: str": "Specifies that the request should return only the playlist items that contain the specified video.",
                    "max_results: int": "The maximum amount of items that will be returned.",
                    "page_token: str": "Identifies a specific page in the result set that should be returned. The `next_page_token` and `prev_page_token` are available in the returned list response for this parameter.",
                    "on_behalf_of_content_owner: str": "Indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value."
                },
                "return": "PlaylistItemListResponse",
                "ref": "https://developers.google.com/youtube/v3/docs/playliststems/list"
            },
            "insert": {
                "def": "Modifies a playlist item.",
                "**Required** parameters": {
                    "body: PlaylistItemResource": [
                        "The [`PlaylistItemResource`](#playlistitemresource) which specifies the details of the playlist item.  ",
                        "**Values you are able to set**:",
                        "- `snippet.playlist_id` (Required)",
                        "- `snippet.resource_id` (Required)",
                        "- `snippet.position`",
                        "- `content_details.note`",
                        "- `content_details.start_at`",
                        "- `content_details.end_at`"
                    ],
                    "part: PlaylistItemPartType": "Identifies the attributes the method will set, and the attributes included in the response."
                },
                "**Optional** parameters": {
                    "on_behalf_of_content_owner: str": "Indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value."
                },
                "return": "PlaylistItemResource",
                "ref": "https://developers.google.com/youtube/v3/docs/playlistItems/insert"
            },
            "update": {
                "def": "Inserts a video into a playlist.",
                "**Required** parameters": {
                    "body: PlaylistItemResource": [
                        "The [`PlaylistItemResource`](#playlistitemresource) which specifies the details of the playlist item.  ",
                        "**Values you are able to set**:",
                        "- `id` (Required)",
                        "- Otherwise, same as the above `insert` method.`"
                    ],
                    "part: PlaylistItemPartType": "Identifies the attributes the method will set, and the attributes included in the response."
                },
                "**Optional** parameters": {
                    "on_behalf_of_content_owner: str": "Indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value."
                },
                "return": "PlaylistItemResource",
                "ref": "https://developers.google.com/youtube/v3/docs/playlistItems/update"
            },
            "delete": {
                "def": "Deletes a playlist item.",
                "**Required** parameters": {
                    "playlist_item_id: str": "The ID of the playlist item that will be deleted."
                },
                "**Optional** parameters": {
                    "on_behalf_of_content_owner: str": "Indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value."
                },
                "ref": "https://developers.google.com/youtube/v3/docs/playlistItems/delete"
            }
        },
        "Thumbnail": {
            "set": {
                "def": "Uploads a custom video thumbnail to YouTube and sets it for a video.",
                "**Required** parameters": {
                    "thumbnail_file: str": "The path to the file of the thumbnail.",
                    "video_id: str": "The ID of the video for the thumbnail."
                },
                "**Optional** parameters": {
                    "on_behalf_of_content_owner: str": "Indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value."
                },
                "return": "ThumbnailListResponse",
                "ref": "https://developers.google.com/youtube/v3/docs/thumbnails/set"
            }
        },
        "Comment": {
            "list": {
                "def": "Retrieve a list of comments.",
                "**Required** parameters": {
                    "part: CommentPartType": "Specifies what properties will be returned by the request."
                },
                "**Filters** (specify exactly one)": {
                    "id": "The id of the comment that should be retrived.",
                    "parent_id": "The ID of the top-level comment whose replies should be retrieved."
                },
                "**Optional** parameters": {
                    "max_results: int": "The maximum amount of items that will be returned.",
                    "page_token: str": "Identifies a specific page in the result set that should be returned. The `next_page_token` and `prev_page_token` are available in the returned list response for this parameter.",
                    "text_format: Literal['html', 'plain_text']": "The format of the returned comment."
                },
                "return": "CommentListResponse",
                "ref": "https://developers.google.com/youtube/v3/docs/comments/list"
            },
            "insert": {
                "def": "Create a reply to a top-level comment. To create a top-level comment, use CommentThread.insert instead.",
                "**Required** parameters": {
                    "body: CommentResource": [
                        "The [`CommentResource`](#commentresource) which specifies the details of the reply.  ",
                        "**Values you are able to set**:",
                        "- `snippet.text_original`",
                        "- `snippet.parent_id`"
                    ],
                    "part: CommentPartType": "Identifies the attributes the method will set, and the attributes included in the response."
                },
                "return": "CommentResource",
                "ref": "https://developers.google.com/youtube/v3/docs/comments/insert"
            },
            "update": {
                "def": "Modifies a comment.",
                "**Required** parameters": {
                    "body: CommentResource": [
                        "The [`CommentResource`](#commentresource) which specifies the details of the comment.  ",
                        "**Values you are able to set**:",
                        "- `id`(Required)",
                        "- `snippet.text_original`"
                    ],
                    "part: CommentPartType": "Identifies the attributes the method will set, and the attributes included in the response."
                },
                "return": "CommentResource",
                "ref": "https://developers.google.com/youtube/v3/docs/comments/update"
            },
            "delete": {
                "def": "Deletes a comment.",
                "**Required** parameters": {
                    "comment_id: str": "The ID of the comment that should be deleted."
                },
                "ref": "https://developers.google.com/youtube/v3/docs/comments/delete"
            }
        },
        "CommentThread": {
            "list": {
                "def": "Retrieve a list of comment threads.",
                "**Required** parameters": {
                    "part: CommentThreadPartType": "Specifies what properties will be returned by the request."
                },
                "**Filters** (specify exactly one)": {
                    "id: str": "The ID of the comment.",
                    "channel_id: str": "Specifies the API to retrieve all comment threads which contain comments from this channel.",
                    "video_id: str": "Specifies the ID of the video whose comments should be retrieved.",
                    "all_threads_related_to_channel_id: str": "Specifies the API to return all comment threads associated with the specified channel."
                },
                "**Optional** parameters": {
                    "moderation_status: Literal['held_for_review', 'likely_spam', 'published']": "Specifies that all returned comments are of the given moderation state.",
                    "order: Literal['time', 'relevance']": "Specifies the order the returned comment threads should be in.",
                    "text_format: Literal['html', 'plain_text']": "The format of the returned comment.",
                    "max_results: int": "The maximum amount of items that will be returned.",
                    "page_token: str": "Identifies a specific page in the result set that should be returned. The `next_page_token` and `prev_page_token` are available in the returned list response for this parameter.",
                    "on_behalf_of_content_owner: str": "Indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value."
                },
                "return": "CommentThreadListResponse",
                "ref": "https://developers.google.com/youtube/v3/docs/commentThreads/list"
            },
            "insert": {
                "def": "Create a new top-level comment.",
                "**Required** parameters": {
                    "body: CommentThreadResource": [
                        "The [`CommentThreadResource`](#commentthreadresource) which specifies the details of the comment.  ",
                        "**Values you are able to set**:",
                        "- `snippet.channel_id`",
                        "- `snippet.video_id`",
                        "- `snippet.top_level_comment.snippet.text_original`"
                    ],
                    "part: CommentThreadPartType": "Identifies the attributes the method will set, and the attributes included in the response."
                },
                "return": "CommentThreadResource",
                "ref": "https://developers.google.com/youtube/v3/docs/commentThreads/insert"
            }
        },
        "VideoCategory": {
            "list": {
                "def": "Returns a list of categories that can be associated with YouTube videos.",
                "**Optional** parameters": {
                    "id: str|list[str]": "The ID of the video category to be retrieved.",
                    "region_code: str": "Specifies the API to retrive all video categories in the specified region code."
                },
                "return": "VideoCategoryListResponse",
                "ref": "https://developers.google.com/youtube/v3/docs/videoCategories/list"
            }
        },
        "VideoAbuseReportReason": {
            "list": {
                "def": "Retrieve a list of reasons that can be used to report abusive videos.",
                "return": "VideoAbuseReportReasonListResponse",
                "ref": "https://developers.google.com/youtube/v3/docs/videoAbuseReportReasons/list"
            }
        },
        "Video": {
            "list": {
                "def": "Retrieves a list of videos.",
                "**Required** parameters": {
                    "part: VideoPartType": [
                        "Specifies what properties will be returned by the request."
                    ]
                },
                "**Filters** (specify exactly one)": {
                    "chart: Literal['most_popular']": "Identifies the chart that you want to retrieve.",
                    "id: list[str]|str": "Specifies the video(s) that should be retrieved.",
                    "my_rating: Literal[\"like\", \"dislike\"]": "Specifies that the API should only retrieve videos that the user has disliked/like."
                },
                "**Optional** parameters": {
                    "region_code: str": [
                        "Specifies the API to select a video chart in the specified region code.",
                        "Used in conjunction with the `chart` parameter."
                    ],
                    "video_category_id: str": [
                        "Specifies the video category for which the chart should be retrieved.",
                        "Used in conjunction with the `chart` parameter."
                    ],
                    "max_height: int": "Specifies the maximum height of the embedded player returned in the `player.embed_html` property",
                    "max_width: int": "Specifies the maximum width of the embedded player returned in the `player.embed_html` property",
                    "max_results: int": "The maximum amount of items that will be returned.",
                    "page_token: str": "Identifies a specific page in the result set that should be returned. The `next_page_token` and `prev_page_token` are available in the returned list response for this parameter.",
                    "on_behalf_of_content_owner: str": "Indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value."
                },
                "return": "VideoListResponse",
                "ref": "https://developers.google.com/youtube/v3/docs/videos/list"
            },
            "insert": {
                "def": "Upload a video to youtube.",
                "**Required** parameters": {
                    "body: VideoResource": [
                        "The [`VideoResource`](#videoresource) which specifies the details of the comment.  ",
                        "**Values you are able to set**:",
                        "- `snippet.title`",
                        "- `snippet.description`",
                        "- `snippet.tags`",
                        "- `snippet.category_id`",
                        "- `snippet.default_language`",
                        "- `status.embeddable`",
                        "- `status.license`",
                        "- `status.public_stats_viewable`",
                        "- `status.publish_at`",
                        "- `status.self_declared_made_for_kids`",
                        "- `recording_details.recording_date`"
                    ],
                    "part: VideoPartType": "Identifies the attributes the method will set, and the attributes included in the response.",
                    "media_body: str": "The path to the file of the uploaded video."
                },
                "**Optional** parameters": {
                    "notify_subscribers: bool": "Indicates whether YouTube should notify subscribers to the video's channel about the video.",
                    "on_behalf_of_content_owner: str": "Indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value."
                },
                "return": "VideoResource",
                "ref": "https://developers.google.com/youtube/v3/docs/videos/insert"
            },
            "update": {
                "def": "Updates a video's metadata.",
                "**Required** parameters": {
                    "body: VideoResource": [
                        "The [`VideoResource`](#videoresource) which specifies the details of the video.  ",
                        "**Values you are able to set**:",
                        "- `id` (Required)",
                        "- `snippet.title (Required IF updating the `snippet` attribute.)`",
                        "- `snippet.description`",
                        "- `snippet.tags`",
                        "- `snippet.category_id`",
                        "- `snippet.default_language`",
                        "- `status.embeddable`",
                        "- `status.license`",
                        "- `status.public_stats_viewable`",
                        "- `status.publish_at`",
                        "- `status.self_declared_made_for_kids`",
                        "- `recording_details.recording_date`"
                    ],
                    "part: VideoPartType": "Identifies the attributes the method will set, and the attributes included in the response."
                },
                "**Optional** parameters": {
                    "on_behalf_of_content_owner: str": "Indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value."
                },
                "return": "VideoResource",
                "ref": "https://developers.google.com/youtube/v3/docs/videos/update"
            },
            "delete": {
                "def": "Deletes a video.",
                "**Required** parameters": {
                    "video_id: str": "The ID of the Video that will be deleted."
                },
                "**Optional** parameters": {
                    "on_behalf_of_content_owner: str": "Indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value."
                },
                "ref": "https://developers.google.com/youtube/v3/docs/videos/delete"
            },
            "rate": {
                "def": "Rate a video.",
                "**Required** parameters": {
                    "video_id: str": "The ID of the Video to rate.",
                    "rating: Literal['dislike', 'like', 'none']": "The rating to give to the video."
                },
                "ref": "https://developers.google.com/youtube/v3/docs/videos/rate"
            },
            "get_rating": {
                "def": "Get a video's rating.",
                "**Required** parameters": {
                    "video_id: str": "The ID of the Video whose rating shall be retrieved.",
                    "on_behalf_of_content_owner: str": "Indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value."
                },
                "return": "VideoGetRatingResponse",
                "ref": "https://developers.google.com/youtube/v3/docs/videos/getrating"
            }
        },
        "Channel": {
            "list": {
                "def": "Retrieve a channel/list of channel resources.",
                "**Required** parameters": {
                    "part: ChannelPartType": "Specifies what properties will be returned by the request."
                },
                "**Filters** (specify exactly one)": {
                    "mine: bool": "Specifies that the API should retrieve the channel of the authorised user.",
                    "for_username: str": "Specifies the name of the channel that should retrieve.",
                    "id: str|list[str]": "The ID of the channel to be retrieved.",
                    "managed_by_me: bool": "Specifies that the API should retrieve channels managed by the authenticated user."
                },
                "**Optional** parameters": {
                    "max_results: int": "The maximum amount of items that will be returned.",
                    "page_token: str": "Identifies a specific page in the result set that should be returned. The `next_page_token` and `prev_page_token` are available in the returned list response for this parameter.",
                    "on_behalf_of_content_owner: str": "Indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value."
                },
                "return": "ChannelListResponse",
                "ref": "https://developers.google.com/youtube/v3/docs/channels/list"
            },
            "update": {
                "def": "Updates a channel.",
                "**Required** parameters": {
                    "body: ChannelResource": [
                        "The [`ChannelResource`](#channelresource) which specifies the details of the channel.  ",
                        "**Values you are able to set**:",
                        "- `branding_settings.channel.description`",
                        "- `branding_settings.channel.country`",
                        "- `branding_settings.channel.default_language`",
                        "- `branding_settings.channel.keywords`",
                        "- `branding_settings.channel.moderate_comments`",
                        "- `branding_settings.channel.tracking_analytics_account_id`",
                        "- `branding_settings.channel.unsubscribed_trailer`",
                        "- `status.self_declared_made_for_kids`"
                    ],
                    "part: ChannelPartType": "Identifies the attributes the method will set, and the attributes included in the response."
                },
                "**Optional** parameters": {
                    "on_behalf_of_content_owner: str": "Indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value."
                },
                "return": "ChannelResource",
                "ref": "https://developers.google.com/youtube/v3/docs/channels/update"
            }
        },
        "ChannelSection": {
            "list": {
                "def": "Retrieve a list of channel sections.",
                "**Required** parameters": {
                    "part: ChannelSectionPartType": "Specifies what properties will be returned by the request."
                },
                "**Filters** (specify exactly one)": {
                    "channel_id: str": "Specifies a channel ID whose channel sections will be returned.",
                    "id: str": "The ID of the sections that should be retrieved.",
                    "mine: bool": "Specifies that the API should retrieve the channel section of the authorised user."
                },
                "**Optional** parameters": {
                    "on_behalf_of_content_owner: str": "Indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value."
                },
                "return": "ChannelSectionListResponse",
                "ref": "https://developers.google.com/youtube/v3/docs/channelSections/list"
            },
            "insert": {
                "def": "Adds a channel section to the autheticated user's channel.",
                "**Required** parameters": {
                    "body: ChannelResource": [
                        "The [`ChannelSectionResource`](#channelsectionresource) which specifies the details of the channel.  ",
                        "**Values you are able to set**:",
                        "- `id`",
                        "- `snippet.type`",
                        "- `snippet.title`",
                        "- `snippet.position`",
                        "- `content_details.playlists`",
                        "- `content_details.channels`"
                    ],
                    "part: ChannelSectionPartType": "Identifies the attributes the method will set, and the attributes included in the response."
                },
                "**Optional** parameters": {
                    "on_behalf_of_content_owner: str": "Indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value.",
                    "on_behalf_of_content_owner_channel: str": "Specifies the YouTube channel ID of the channel to which a video is being added."
                },
                "return": "ChannelSectionResource",
                "ref": "https://developers.google.com/youtube/v3/docs/channelSections/insert"
            },
            "update": {
                "def": "Updates a channel section.",
                "**Required** parameters": {
                    "body: ChannelResource": [
                        "The [`ChannelSectionResource`](#channelsectionresource) which specifies the details of the channel.  ",
                        "**Values you are able to set**:",
                        "- `id`",
                        "- `snippet.type`",
                        "- `snippet.title`",
                        "- `snippet.position`",
                        "- `content_details.playlists`",
                        "- `content_details.channels`"
                    ],
                    "part: ChannelSectionPartType": "Identifies the attributes the method will set, and the attributes included in the response."
                },
                "**Optional** parameters": {
                    "on_behalf_of_content_owner: str": "Indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value."
                },
                "return": "ChannelSectionResource",
                "ref": "https://developers.google.com/youtube/v3/docs/channelSections/update"
            },
            "delete": {
                "def": "Deletes a channel section.",
                "**Required** parameters": {
                    "section_id: str": "The ID of the channel section that will be deleted."
                },
                "**Optional** parameters": {
                    "on_behalf_of_content_owner: str": "Indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value."
                },
                "ref": "https://developers.google.com/youtube/v3/docs/channelSections/delete"
            }
        },
        "Subscription": {
            "list": {
                "def": "Retrieve subscription resources.",
                "**Required** parameters": {
                    "part: SubscriptionPartType": "Specifies what properties will be returned by the request."
                },
                "**Filters** (specify exactly one)": {
                    "channel_id: str": "Specifies a channel ID whose subscriptions will be returned.",
                    "id: str|list[str]": "The ID of the channel to be retrieved.",
                    "mine: bool": "Specifies that the API should retrieve the subscriptions of the authorised user.",
                    "my_recent_subscribers: bool": "Retrieve a feed of the subscribers of the authenticated user in reverse chronological order.",
                    "my_subscribers: bool": "Retrieve a feed of the subscribers of the authenticated user in no particular order"
                },
                "**Optional** parameters": {
                    "order: Literal['alphabetical', 'relevance', 'unread']": "Specifies the method that will be used to sort resources in the response.",
                    "for_channel_id: str": "Specifies a list of channel IDs, which the APi will only match to.",
                    "max_results: int": "The maximum amount of items that will be returned.",
                    "page_token: str": "Identifies a specific page in the result set that should be returned. The `next_page_token` and `prev_page_token` are available in the returned list response for this parameter.",
                    "on_behalf_of_content_owner: str": "Indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value.",
                    "on_behalf_of_content_owner_channel: str": "Specifies the YouTube channel ID of the channel to which a video is being added."
                },
                "return": "SubscriptionListResponse",
                "ref": "https://developers.google.com/youtube/v3/docs/subscriptions/list"
            },
            "insert": {
                "def": "Subscribe to a channel.",
                "**Required** parameters": {
                    "channel_id: str": "Specifies a channel ID to subscribe to.",
                    "part: SubscriptionPartType": "Identifies the attributes the method will set, and the attributes included in the response."
                },
                "return": "SubscriptionResource",
                "ref": "https://developers.google.com/youtube/v3/docs/subscriptions/insert"
            },
            "delete": {
                "def": "Deletes a subscription.",
                "**Required** parameters": {
                    "subscription_id: str": "The ID of the subscription that will be deleted."
                },
                "ref": "https://developers.google.com/youtube/v3/docs/subscriptions/delete"
            }
        },
        "Search": {
            "list": {
                "def": "Searches something on youtube.",
                "**Required** parameters": {
                    "q: str": "The query to search for."
                },
                "**Filters** (specify one or zero of these parameters.)": {
                    "for_content_owner: bool": "Restricts the search to only retrieve videos owned by the content owner identified by the `on_behalf_of_content_owner` parameter.",
                    "for_developer: bool": "Restricts the search to only retrieve videos uploaded via the developer's application or website.",
                    "for_mine: bool": "Restricts the search to only retrieve videos owned by the authenticated user.",
                    "related_to_video_id: bool": "Specifies the ID of a video. The API will restrict the search result to videos related to that video."
                },
                "**Optional** parameters": {
                    "order: Literal['date', 'rating', 'relevance', 'title', 'videoCount', 'viewCount']": "Specifies the order of the resource.",
                    "safe_search: Literal['none', 'moderate', 'strict']": "Specifies whether the API should retrieve restricted content or not.",
                    "type: Literal['channel', 'playlist', 'video']": "Specifies what type of resource will be returned.",
                    "published_after: str": "Restricts the API to only return resources published after the specified time in the parameter.",
                    "published_before: str": "Restricts the API to only return resources published before the specified time in the parameter.",
                    "region_code: str": "Specifies to return search results available in the region code.",
                    "relevance_language: str": "Specifies to return search results that are most relevant to the specified language.",
                    "location: str": [
                        "Restricts the search result to resources published in the specified location.",
                        "Used in conjunction with `location_radius`."
                    ],
                    "location_radius: str": "Specifies the area around the point provided by `location` to restrict videos.",
                    "channel_id: str": "Specifies that the result should only contain resources published by the provided channel.",
                    "channel_type: Literal['show']": "Restricts the search to a particular type of channel.",
                    "event_type: Literal['completed', 'live', 'upcoming']": [
                        "Restricts a search to broadcast events.",
                        "Set the `type` parameter to `video` when specifying this parameter."
                    ],
                    "video_caption: Literal['closedCaption', 'none']": "See the attached reference.",
                    "video_category_id: str": "See the attached reference.",
                    "video_definition: Literal['high', 'standard']": "See the attached reference.",
                    "video_dimension: Literal['2d', '3d']": "See the attached reference.",
                    "video_duration: Literal['long', 'medium', 'short']": "See the attached reference.",
                    "video_embeddable: Literal['true']": "See the attached reference.",
                    "video_license: Literal['creativeCommon', 'youtube']": "See the attached reference.",
                    "video_syndicated: Literal['true']": "See the attached reference.",
                    "video_type: Literal['episode', 'movie']": "See the attached reference.",
                    "max_results: int": "The maximum amount of items that will be returned.",
                    "page_token: str": "Identifies a specific page in the result set that should be returned. The `next_page_token` and `prev_page_token` are available in the returned list response for this parameter.",
                    "on_behalf_of_content_owner: str": "Indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value."
                },
                "return": "SearchResultListResponse",
                "ref": "https://developers.google.com/youtube/v3/docs/search/list"
            }
        },
        "I18n": {
            "list_languages": {
                "def": "Returns a list of languages that YouTube supports.",
                "return": "I18nLanguageListResponse",
                "ref": "https://developers.google.com/youtube/v3/docs/i18nLanguages/list/"
            },
            "list_regions": {
                "def": "Returns a list of content regions that YouTube supports.",
                "return": "I18nLanguageRegionResponse",
                "ref": "https://developers.google.com/youtube/v3/docs/i18nRegions/list/"
            }
        }
    },
    "resources": {
        "PlaylistResource": {
            "def": "Represents a Youtube playlist.",
            "kind": "Identifies the API resource's type.",
            "etag: str": "The etag of the resource.",
            "id: str": "The ID of the playlist.",
            "snippet": {
                "def": "Basic details about the playlist.",
                "published_at: str": "The date when this was published at.",
                "channel_id: str": "The ID of the channel which published the playlist.",
                "title: str": "The title of the playlist.",
                "description: str": "The description of the playlist",
                "thumbnails: ThumbnailResource": "The thumbnails of the playlist.",
                "channel_title: str": "The title of the channel which published the playlist.",
                "default_language: str": "The language of the text in the `snippet.title` and `snippet.description` attributes.",
                "localized": {
                    "def": "Localized title and description.",
                    "title: str": "Localized title.",
                    "description: str": "Localized description."
                }
            },
            "status": {
                "def": "Status information of the playlist.",
                "privacy_status: str": "The playlist's privacy status."
            },
            "content_details": {
                "def": "Information about the playlist's content.",
                "item_count: int": "The number of videos in the playlist."
            },
            "player": {
                "def": "Information about the playlist in an embedded player.",
                "embed_html: str": "An `<iframe>` tag that embeds a player "
            }
        },
        "PlaylistItemResource": {
            "def": "Represents a video in a playlist.",
            "kind": "Identifies the API resource's type.",
            "etag: str": "The etag of the resource.",
            "id: str": "The ID of the playlist item.",
            "snippet": {
                "def": "Basic details about the playlist item.",
                "published_at: str": "The date when this was published at.",
                "channel_id: str": "The ID of the channel which added the item to the playlist..",
                "title: str": "The title of the playlist item.",
                "description: str": "The description of the playlist item.",
                "thumbnails: ThumbnailResource": "The thumbnails of the playlist item.",
                "channel_title: str": "The title of the channel which added the video.",
                "video_owner_channel_title: str": "The title of the channel that the video belonged to.",
                "video_owner_channel_id: str": "The id of the channel that the video belonged to.",
                "playlist_id: str": "The ID of the playlist that the resource belonged to.",
                "position: int": "The order of the item in the playlist.",
                "resourceId": {
                    "def": "Contains info that identifies the resource.",
                    "kind: str": "The kind/type of the resource.",
                    "video_id: str": "The ID of the video."
                }
            },
            "content_details": {
                "def": "Additional info about the video.",
                "video_id: str": "The ID of the video.",
                "note: str": "The user generated note for this item.",
                "video_published_at: str": "The time the video was published at."
            },
            "status": {
                "def": "Info about the playlist item's privacy status.",
                "privacy_status: str": "The playlist item's privacy status."
            }
        },
        "ThumbnailResource": {
            "def": "Identifies different thumbnail image sizes associated with a resource.",
            "default": {
                "def": "The default thumbnail image. 120px wide and 90px tall for a video, 88px wide and 88px tall for a channel.",
                "url: str": "The image's URL.",
                "width: int": "The image's width.",
                "height: int": "The image's height."
            },
            "medium": {
                "def": "A higher resolution version of the thumbnail. 320px wide and 180px tall for a video, 240px wide and 240px for a channel.",
                "url: str": "The image's URL.",
                "width: int": "The image's width.",
                "height: int": "The image's height."
            },
            "high": {
                "def": "A high resolution version of the thumbnail. 480px wide and 360px tall for a video, 800px wide and 800px for a channel.",
                "url: str": "The image's URL.",
                "width: int": "The image's width.",
                "height: int": "The image's height."
            },
            "standard": {
                "def": "An even higher resolution version of the thumbnail. 640px wide and 480px tall for a video.",
                "url: str": "The image's URL.",
                "width: int": "The image's width.",
                "height: int": "The image's height."
            },
            "maxres": {
                "def": "The highest resolution version of the thumbnail image. 1280px wide and 720px tall for a video.",
                "url: str": "The image's URL.",
                "width: int": "The image's width.",
                "height: int": "The image's height."
            }
        },
        "CommentResource": {
            "def": "Represents a single Youtube comment.",
            "kind: str": "The kind/type of the resource.",
            "etag: str": "The etag of the resource.",
            "id: str": "The ID of the comment.",
            "snippet": {
                "def": "Basic details about the comment.",
                "author_display_name: str": "The name of the commenter.",
                "author_profile_image_url: str": "The URL to the profile image of the commenter.",
                "author_channel_url: str": "The URL of the commenter's channel.",
                "author_channel_id": {
                    "def": "Info about the author's channel",
                    "value: str": "The author's channel ID."
                },
                "channel_id: str": "The channel ID who uploaded the video the comment was left on.",
                "video_id: str": "The ID of the video the comment was left on.",
                "text_display: str": "The comment's text, either in plain text or HTML form.",
                "text_original: str": "The original, unedited comment text.",
                "parent_id: str": "The ID of the comment's parent (if the comment is a reply).",
                "can_rate: bool": "Whether the authorised user is able to rate the comment.",
                "viewer_rating: str": "The rating the authorised user gave to the comment.",
                "like_count: int": "The like count of the comment.",
                "moderation_status: str": "The comment's moderation status.",
                "published_at: str": "The date and time when the comment was orignally published.",
                "updated_at: str": "The date and time when the comment was last updated."
            }
        },
        "CommentThreadResource": {
            "def": "Represents a Youtube comment thread, consisting of a top-level comment and it's replies.",
            "kind: str": "The kind/type of the resource.",
            "etag: str": "The etag of the resource.",
            "id: str": "The ID of the comment thread.",
            "snippet": {
                "def": "Basic details about the comment thread.",
                "channel_id: str": "The Youtube channel associated with the comment thread.",
                "video_id: str": "The video that the comment thread is under/",
                "top_level_comment: CommentResource": "The top-level comment.",
                "can_reply: bool": "Whether the authorised user can reply to the comment thread or not.",
                "total_reply_count: int": "The amount of replies in the comment thread.",
                "is_public: bool": "Whether the comment thread is public or not."
            },
            "replies": {
                "def": "A container of the comment thread's replies. `replies.comments` represents the list of replies themselves.",
                "comments: list[CommentResource]": "A list containing the replies. Only a subset of replies will be available in the this list. To get the full amount of replies from a comment thread, use the `comment.list` method."
            }
        },
        "I18nLanguageResource": {
            "def": "Identifies a language that Youtube supports.",
            "kind: str": "The kind/type of the resource.",
            "etag: str": "The etag of the resource.",
            "id: str": "The ID of the I18n language.",
            "snippet": {
                "def": "Basic details about the language.",
                "hl: str": "A BCP-47 code that uniquely identifies a language.",
                "name: str": "The name of the language."
            }
        },
        "I18nRegionResource": {
            "def": "Identifies a region that Youtube supports.",
            "kind: str": "The kind/type of the resource.",
            "etag: str": "The etag of the resource.",
            "id: str": "The ID of the I18n region.",
            "snippet": {
                "def": "Basic details about the region.",
                "gl: str": "The two-letter ISO country code that identifies a language.",
                "name: str": "The name of the region."
            }
        },
        "VideoCategoryResource": {
            "def": "Identifies a category associated with a Youtube video.",
            "kind: str": "The kind/type of the resource.",
            "etag: str": "The etag of the resource.",
            "id: str": "The ID of the category.",
            "snippet": {
                "def": "Basic details about the category.",
                "channel_id: str": "The channel that created the category, which is Youtube itself. The value will be `UCBR8-60-B28hp2BmDPdntcQ`",
                "title: str": "The title of the category.",
                "assignable: bool": " Indicates whether videos can be associated with the category."
            }
        },
        "VideoAbuseReportReasonResource": {
            "def": "Contains information about a reason that a video could be reported for.",
            "kind: str": "The kind/type of the resource.",
            "etag: str": "The etag of the resource.",
            "id: str": "The ID of the reason.",
            "snippet": {
                "def": "Basic details about the reason.",
                "label: str": "The localized label text for the reason.",
                "secondary_reasons: list": {
                    "def": "A list of secondary reasons associated with the reason.",
                    "id: str": "The ID of the secondary reason.",
                    "label: str": "The localized label text for the reason. "
                }
            }
        },
        "VideoResource": {
            "def": "Represents a Youtube video.",
            "kind": "youtube#video",
            "etag": "etag",
            "id: str": "The ID of the video.",
            "snippet": {
                "def": "Basic details about the video.",
                "published_at: str": "The date and time when the video was published.",
                "channel_id: str": "The ID of the channel that uploaded the video.",
                "title: str": "The title of the video.",
                "description: str": "The description of the video",
                "thumbnails: ThumbnailResource": "The thumbnails of the video.",
                "channel_title: str": "The title of the video's uploader.",
                "tags: list[str]": "The tags associated with the video.",
                "category_id: str": "The ID of the category the video belongs to.",
                "live_broadcast_content: str": "Indicates if the video is an upcoming/active live broadcast.",
                "default_language: str": "The language of the text in the `snippet.title` and `snippet.description` attributes.",
                "localized": {
                    "def": "Contains the localized title and description for the video.s",
                    "title: str": "The localized video title.",
                    "description: str": " The localized video description."
                }
            },
            "content_details": {
                "def": "Contains information about the video content.",
                "duration: str": "The length of the video.",
                "dimension: str": "Indicates whether the video is 2D or 3D",
                "definition: str": "Indicates whether the video is in HD or just SD.",
                "caption: str": "Indicates whether the video has captions or not.",
                "licensed_content: bool": "Indicates whether the video represents licensed content.",
                "region_restriction": {
                    "def": "Contains info about which regions the video is viewable.",
                    "allowed: list[str]": "A list of region codes that identify countries where the video is viewable.",
                    "blocked: list[str]": "A list of region codes that identify countries where the video is blocked."
                },
                "content_rating": "Specifies the video's rating under various rating schemes.",
                "projection: str": "Specifies whether the video's projection is `360` or `rectangular`.",
                "has_custom_thumbnail: bool": "Whether the video has a custom thumbnail or not."
            },
            "status": {
                "def": "Contains information about the video's uploading, processing, and privacy statuses.",
                "upload_status: str": "The status of the uploaded video.", 
                "failure_reason: str": "Explains why a video failed to upload. Available when `upload_status` identifies that the video failed to upload.", 
                "rejection_reason: str": "Explains why the uploaded video got rejected. Available when `upload_status` identifies that the video was rejected.", 
                "privacy_status: str": "The video's privacy status.", 
                "publish_at: str": "The date and time when the video is scheduled to publish.",
                "license: str": " The video's license.",
                "embeddable: bool": "Whether the video can be embedded on another website.", 
                "public_stats_viewable: bool": "Whether the extended statistics on the video's watch page are publicly viewable.", 
                "made_for_kids: bool": "Whether the video is designated as made for kids.", 
                "self_declared_made_for_kids: bool": "Whether the video is designated by the creator as made for kids."
            },
            "statistics": {
                "def": "Contains statistics about the video.",
                "view_count: int": "The amount of views the video has.",
                "like_count: int": "The amount of likes the video has.",
                "dislike_count: int": "The amount of dislikes the video has. Only available if the user is the video uploader.",
                "favorite_count: int": "<font color='red'>Deprecated.</font>",
                "comment_count: int": "The amount of comments the video has."
            },
            "player": {
                "def": "Information about the video in an embedded player.",
                "embed_html: str": "An `<iframe>` which embeds a player that plays the video.",
                "embed_height: int": "The height of the player.",
                "embed_width: int": "The width of the player."
            },
            "topic_details": {
                "def": "Contains info about the topics associated with the video.",
                "topic_ids: list[str]": "<font color='red'>Deprecated.</font>",
                "relevantTopic_ids: list[str]": "A list of topic IDs that are relevant to the video.",
                "topic_categories: list[str]": "A list of Wikipedia URLs that provide a high-level description of the video's content."
            },
            "recordingDetails": {
                "def": "Contains info about the recording.",
                "recording_date: str": "When the video was recorded."
            },
            "file_details": {
                "def":"Contains info about the file that was uploaded to Youtube.",
                "file_name: str": "The name of the file.", 
                "file_size: int": "The size of the file in bytes.", 
                "file_type: str": "The type of the file.", 
                "container: str": "The container format of the file.", 
                "duration_ms: int": "The length of the video in milliseconds.",  
                "bitrate_bps: int": "The video's bitrate in bits per seconds.",  
                "creation_time: str": "When the video is created, in ISO 8601 format.",  
                "video_streams: list": {
                    "def": "A list of video streams contained in the uploaded video file.",
                    "width_pixels: int": "The encoded video content's width in pixels.",
                    "height_pixels: int": "The encoded video content's height in pixels",
                    "frame_rate_fps: int": "The video stream's frame rate, in frames per second.", 
                    "aspect_ratio: int": "The video content's display aspect ratio.", 
                    "codec: str": "The video codec that the stream uses.", 
                    "bitrate_bps: int": " The video stream's bitrate, in bits per second.",  
                    "rotation: str": "The amount that YouTube needs to rotate the original source content to properly display the video.", 
                    "vendor: str": "A value (usually a four-letter code) that uniquely identifies a video vendor."
                },
                "audio_streams: list": {
                    "def": "A list of audio streams contained in the uploaded video file.",
                    "channel_count: int": "The number of audio channels that the stream contains.",
                    "codec: str": " The audio codec that the stream uses.", 
                    "bitrate_bps: int": " The audio stream's bitrate, in bits per second.",
                    "vendor: str": "A value (usually a four-letter code) that uniquely identifies a video vendor."
                }
            },
            "processing_details": {
                "def": "Contains information about YouTube's progress in processing the uploaded video file.",
                "processing_status: str": "The video's processing status.",
                "processing_progress": {
                    "def": "Contains information about the progress YouTube has made in processing the video.",
                    "parts_total: int": "An estimate of the total number of parts that need to be processed for the video.",
                    "parts_processed: int": "The number of parts of the video that YouTube has already processed.",
                    "time_left_ms: int": " An estimate of the amount of time, in millseconds, that YouTube needs to finish processing the video."
                },
                "processing_failure_reason: str": "The reason that YouTube failed to process the video.",
                "file_details_availability: str": "Whether file details are available for the uploaded video.",
                "processing_issues_availability: str": "Whether the processor has generated suggestions and warnings that explains processing issues.",
                "tag_suggestions_availability: str": "Indicates whether keyword (tag) suggestions are available for the video.",
                "editor_suggestions_availability: str": "Whether video editing suggestions are available for the video.",
                "thumbnails_availability: str": "Whether thumbnail images have been generated for the video."
            },
            "suggestions": {
                "def": "Encapsulates suggestions that identify opportunities to improve the video quality or the metadata for the uploaded video.",
                "processing_errors: list[str]": "A list of errors that will prevent YouTube from successfully processing the uploaded video.",
                "processing_warnings: list[str]": "A list of reasons why YouTube may have difficulty transcoding the uploaded video.",
                "processing_hints: list[str]": "A list of suggestions that may improve YouTube's ability to process the video.",
                "editor_suggestions: list[str]": "A list of video editing operations that might improve the video quality or playback experience of the uploaded video.",
                "tag_suggestions: list": {
                    "def": "A list of keyword tags that could be added to the video's metadata to increase the likelihood that users will locate your video when searching or browsing on YouTube.",
                    "tag: str": "The keyword tag suggested for the video.",
                    "category_restricts: list[str]": "A set of video categories for which the tag is relevant."
                }
            },
            "live_streaming_details": {
                "def": "Contains metadata about a live video broadcast.",
                "actual_start_time: str": "The time the broadcast started.",
                "actual_end_time: str": "The time the broadcast ended.",
                "scheduled_start_time: str": "The time the broadcast was scheduled to start.",
                "scheduled_end_time: str": "The time the broadcast was scheduled to end.",
                "concurrent_viewers: int": "The amount of viewers currently watching the stream.", 
                "active_live_chat_id: str": "The ID of the currently active live chat attached to this video."
            }
        },
        "ChannelResource": {},
        "ChannelSectionResource": {},
        "SearchResult": {},
        "SubscriptionResource": {},
        "PlaylistListResponse": {},
        "PlaylistItemListResponse": {},
        "ThumbnailListResponse": {},
        "CommentListResponse": {},
        "CommentThreadListResponse": {},
        "I18nLanguageListResponse": {},
        "I18nRegionListResponse": {},
        "VideoCategoryListResponse": {},
        "VideoAbuseReportReasonListResponse": {},
        "VideoListResponse": {},
        "VideoGetRatingResponse": {},
        "ChannelListResponse": {},
        "ChannelSectionListResponse": {},
        "SearchListResponse": {},
        "SubscriptionListResponse": {}
    }
}