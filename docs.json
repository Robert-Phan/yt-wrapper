{
    "methods": {
        "Playlist": {
            "list": {
                "def": "Returns a collection of playlists.",
                "**Required** parameters": {
                    "part: PlaylistPartType": [
                        "Specifies what properties will be returned by the request."
                    ]
                },
                "**Filters** (specify exactly one)": {
                    "id: list[str]|str": [
                        "The playlist ID/list of playlist IDs that will be returned."
                    ],
                    "channel_id: str": [
                        "Specifies a channel ID whose playlists will be returned."
                    ],
                    "mine: bool": [
                        "Specifies that the API should retrieve the playlists of the authorised user."
                    ]
                },
                "**Optional** parameters": {
                    "max_results: int": [
                        "The maximum amount of items that will be returned."
                    ],
                    "page_token: str": [
                        "Identifies a specific page in the result set that should be returned. The `next_page_token` and `prev_page_token` are available in the returned list response for this parameter."
                    ],
                    "on_behalf_of_content_owner: str": [
                        "Indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value."
                    ]
                },
                "ref": "https://developers.google.com/youtube/v3/docs/playlists/list"
            },
            "insert": {
                "def": "Creates a playlist.",
                "**Required** parameters": {
                    "part: PlaylistPartType": [
                        "Identifies the attributes the method will set, and the attributes included in the response."
                    ],
                    "body: [PlaylistResource](#playlistresource)": [
                        "The [`PlaylistResource`](#playlistresource) which specifies the details of this playlist.",
                        "**Values you are able to set**:",
                        "- `snippet.title` (Required)",
                        "- `snippet.description`",
                        "- `snippet.privacy_status`"
                    ]
                },
                "**Optional** parameters": {
                    "on_behalf_of_content_owner: str": [
                        "Indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value."
                    ]
                },
                "return": "[PlaylistResource](#playlistresource)",
                "ref": "https://developers.google.com/youtube/v3/docs/playlists/insert"
            },
            "update": {
                "def": "Updates a playlist.",
                "**Required** parameters": {
                    "part: PlaylistPartType": [
                        "Identifies the attributes the method will set, and the attributes included in the response."
                    ],
                    "body: PlaylistResource": [
                        "The [`PlaylistResource`](#playlistresource) which specifies the details of this playlist.",
                        "**Values you are able to set**:",
                        "- `id` (Required)",
                        "- Otherwise, same as the above `insert` method.`"
                    ]
                },
                "**Optional** parameters": {
                    "on_behalf_of_content_owner: str": [
                        "Indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value."
                    ]
                },
                "return": "PlaylistResource",
                "ref": "https://developers.google.com/youtube/v3/docs/playlists/update"
            },
            "delete": {
                "def": "Deletes a playlist.",
                "**Required** parameters": {
                    "playlist_id: str": [
                        "The ID of the playlist that will be deleted."
                    ]
                },
                "**Optional** parameters": {
                    "on_behalf_of_content_owner: str": [
                        "Indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value."
                    ]
                },
                "ref": "https://developers.google.com/youtube/v3/docs/playlists/delete"
            }
        },
        "PlaylistItem": {
            "list": {
                "def": "Returns a collection of playlist items that match the API request parameters.",
                "**Required** parameters": {
                    "part: PlaylistItemPartType": [
                        "Specifies what properties will be returned by the request."
                    ]
                },
                "**Filters** (specify exactly one)": {
                    "id: list[str]|str": [
                        "The ID/list of IDs of the playlist items that should be returned."
                    ],
                    "playlist_id: str": [
                        "The ID of the playlist whose videos will be retrieved."
                    ]
                },
                "**Optional** parameters": {
                    "video_id: str": [
                        "Specifies that the request should return only the playlist items that contain the specified video."
                    ],
                    "max_results: int": [
                        "The maximum amount of items that will be returned."
                    ],
                    "page_token: str": [
                        "Identifies a specific page in the result set that should be returned. The `next_page_token` and `prev_page_token` are available in the returned list response for this parameter."
                    ],
                    "on_behalf_of_content_owner: str": [
                        "Indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value."
                    ]
                },
                "ref": "https://developers.google.com/youtube/v3/docs/playliststems/list"
            },
            "insert": {
                "def": "Modifies a playlist item.",
                "**Required** parameters": {
                    "part: PlaylistItemPartType": [
                        "Identifies the attributes the method will set, and the attributes included in the response."
                    ],
                    "body: PlaylistItemResource": [
                        "The [`PlaylistItemResource`](#playlistitemresource) which specifies the details of the playlist item.",
                        "**Values you are able to set**:",
                        "- `id` (Required)",
                        "- Otherwise, same as the above `insert` method.`"
                    ]
                },
                "**Optional** parameters": {
                    "on_behalf_of_content_owner: str": [
                        "Indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value."
                    ]
                },
                "return": "PlaylistItemResource",
                "ref": "https://developers.google.com/youtube/v3/docs/playlistItems/insert"
            },
            "update": {
                "def": "Inserts a video into a playlist.",
                "**Required** parameters": {
                    "part: PlaylistItemPartType": [
                        "Identifies the attributes the method will set, and the attributes included in the response."
                    ],
                    "body: PlaylistItemResource": [
                        "The [`PlaylistItemResource`](#playlistitemresource) which specifies the details of the playlist item.",
                        "**Values you are able to set**:",
                        "- `snippet.playlist_id` (Required)",
                        "- `snippet.resource_id` (Required)",
                        "- `snippet.position` (Required)",
                        "- `content_details.note` (Required)",
                        "- `content_details.start_at` (Required)",
                        "- `content_details.end_at` (Required)"
                    ]
                },
                "**Optional** parameters": {
                    "on_behalf_of_content_owner: str": [
                        "Indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value."
                    ]
                },
                "return": "PlaylistItemResource",
                "ref": "https://developers.google.com/youtube/v3/docs/playlistItems/update"
            },
            "delete": {
                "def": "Deletes a playlist item.",
                "**Required** parameters": {
                    "playlist_item_id: str": [
                        "The ID of the playlist item that will be deleted."
                    ]
                },
                "**Optional** parameters": {
                    "on_behalf_of_content_owner: str": [
                        "Indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value."
                    ]
                },
                "ref": "https://developers.google.com/youtube/v3/docs/playlistItems/delete"
            }
        },
        "Thumbnail": {
            "set": {
                "def": "Uploads a custom video thumbnail to YouTube and sets it for a video.",
                "**Required** parameters": {
                    "thumbnail_file: str": [
                        "The path to the file of the thumbnail."
                    ],
                    "video_id: str": [
                        "The ID of the video for the thumbnail."
                    ]
                },
                "**Optional** parameters": {
                    "on_behalf_of_content_owner: str": [
                        "Indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value."
                    ]
                },
                "ref": "https://developers.google.com/youtube/v3/docs/thumbnails/set"
            }
        },
        "Comment": {
            "list": {
                "def": "Retrieve a list of comments.",
                "**Required** parameters": {
                    "part: CommentPartType": [
                        "Specifies what properties will be returned by the request."
                    ]
                },
                "**Filters** (specify exactly one)": {
                    "id": [
                        "The id of the comment that should be retrived."
                    ],
                    "parent_id": [
                        "The ID of the top-level comment whose replies should be retrieved."
                    ]
                },
                "**Optional** parameters": {
                    "max_results: int": [
                        "The maximum amount of items that will be returned."
                    ],
                    "page_token: str": [
                        "Identifies a specific page in the result set that should be returned. The `next_page_token` and `prev_page_token` are available in the returned list response for this parameter."
                    ],
                    "text_format: Literal['html', 'plain_text']": [
                        "The format of the returned comment."
                    ]
                },
                "ref": "https://developers.google.com/youtube/v3/docs/comments/list"
            },
            "insert": {
                "def": "Create a reply to a top-level comment. To create a top-level comment, use CommentThread.insert instead.",
                "**Required** parameters": {
                    "part: CommentPartType": [
                        "Identifies the attributes the method will set, and the attributes included in the response."
                    ],
                    "body: CommentResource": [
                        "The [`CommentResource`](#commentresource) which specifies the details of the reply.",
                        "**Values you are able to set**:",
                        "- `snippet.text_original`",
                        "- `snippet.parent_id`"
                    ]
                },
                "return": "CommentResource",
                "ref": "https://developers.google.com/youtube/v3/docs/comments/insert"
            },
            "update": {
                "def": "Modifies a comment.",
                "**Required** parameters": {
                    "part: CommentPartType": [
                        "Identifies the attributes the method will set, and the attributes included in the response."
                    ],
                    "body: CommentResource": [
                        "The [`CommentResource`](#commentresource) which specifies the details of the comment.",
                        "**Values you are able to set**:",
                        "- `id`",
                        "- `snippet.text_original`"
                    ]
                },
                "return": "CommentResource",
                "ref": "https://developers.google.com/youtube/v3/docs/comments/update"
            },
            "delete": {
                "def": "Deletes a comment.",
                "**Required** parameters": {
                    "comment_id: str": [
                        "The ID of the comment that should be deleted."
                    ]
                },
                "ref": "https://developers.google.com/youtube/v3/docs/comments/delete"
            }
        },
        "CommentThread": {
            "list": {
                "def": "Retrieve a list of comment threads.",
                "**Required** parameters": {
                    "part: CommentThreadPartType": [
                        "Specifies what properties will be returned by the request."
                    ]
                },
                "**Filters** (specify exactly one)": {
                    "id: str": [
                        "The ID of the comment."
                    ],
                    "channel_id: str": [
                        "Specifies the API to retrieve all comment threads which contain comments from this channel."
                    ],
                    "video_id: str": [
                        "Specifies the ID of the video whose comments should be retrieved."
                    ],
                    "all_threads_related_to_channel_id: str": [
                        "Specifies the API to return all comment threads associated with the specified channel."
                    ]
                },
                "**Optional** parameters": {
                    "moderation_status: Literal['held_for_review', 'likely_spam', 'published']": [
                        "Specifies that all returned comments are of the given moderation state."
                    ],
                    "order: Literal['time', 'relevance']": [
                        "Specifies the order the returned comment threads should be in."
                    ],
                    "text_format: Literal['html', 'plain_text']": [
                        "The format of the returned comment."
                    ],
                    "max_results: int": [
                        "The maximum amount of items that will be returned."
                    ],
                    "page_token: str": [
                        "Identifies a specific page in the result set that should be returned. The `next_page_token` and `prev_page_token` are available in the returned list response for this parameter."
                    ],
                    "on_behalf_of_content_owner: str": [
                        "Indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value."
                    ]
                },
                "ref": "https://developers.google.com/youtube/v3/docs/commentThreads/list"
            },
            "insert": {
                "def": "Create a new top-level comment.",
                "**Required** parameters": {
                    "part: CommentThreadPartType": [
                        "Identifies the attributes the method will set, and the attributes included in the response."
                    ],
                    "body: CommentThreadResource": [
                        "The [`CommentThreadResource`](#commentthreadresource) which specifies the details of the comment.",
                        "**Values you are able to set**:",
                        "- `snippet.channel_id`",
                        "- `snippet.video_id`",
                        "- `snippet.top_level_comment.snippet.text_original`"
                    ]
                },
                "return": "CommentThreadResource",
                "ref": "https://developers.google.com/youtube/v3/docs/commentThreads/insert"
            }
        },
        "VideoCategory": {
            "list": {
                "def": "Returns a list of categories that can be associated with YouTube videos.",
                "**Optional** parameters": {
                    "id: str|list[str]": [
                        "The ID of the video category to be retrieved."
                    ],
                    "region_code: str": [
                        "Specifies the API to retrive all video categories in the specified region code."
                    ]
                },
                "ref": "https://developers.google.com/youtube/v3/docs/videoCategories/list"
            }
        },
        "VideoAbuseReportReason": {
            "list": {
                "def": "Retrieve a list of reasons that can be used to report abusive videos.",
                "ref": "https://developers.google.com/youtube/v3/docs/videoAbuseReportReasons/list"
            }
        },
        "Video": {
            "list": {
                "def": "Retrieves a list of videos.",
                "**Required** parameters": {
                    "part: VideoPartType": [
                        "Specifies what properties will be returned by the request."
                    ]
                },
                "**Filters** (specify exactly one)": {
                    "chart: Literal['most_popular']": [
                        "Identifies the chart that you want to retrieve."
                    ],
                    "id: list[str]|str": [
                        "Specifies the video(s) that should be retrieved."
                    ],
                    "my_rating: Literal[\"like\", \"dislike\"]": [
                        "Specifies that the API should only retrieve videos that the user has disliked/like."
                    ]
                },
                "**Optional** parameters": {
                    "region_code: str": [
                        "Specifies the API to select a video chart in the specified region code.",
                        "Used in conjunction with the `chart` parameter."
                    ],
                    "video_category_id: str": [
                        "Specifies the video category for which the chart should be retrieved.",
                        "Used in conjunction with the `chart` parameter."
                    ],
                    "max_height: int": [
                        "Specifies the maximum height of the embedded player returned in the `player.embed_html` property"
                    ],
                    "max_width: int": [
                        "Specifies the maximum width of the embedded player returned in the `player.embed_html` property"
                    ],
                    "max_results: int": [
                        "The maximum amount of items that will be returned."
                    ],
                    "page_token: str": [
                        "Identifies a specific page in the result set that should be returned. The `next_page_token` and `prev_page_token` are available in the returned list response for this parameter."
                    ],
                    "on_behalf_of_content_owner: str": [
                        "Indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value."
                    ]
                },
                "ref": "https://developers.google.com/youtube/v3/docs/videos/list"
            },
            "insert": {
                "def": "Upload a video to youtube.",
                "**Required** parameters": {
                    "part: VideoPartType": [
                        "Identifies the attributes the method will set, and the attributes included in the response."
                    ],
                    "body: VideoResource": [
                        "The [`VideoResource`](#videoresource) which specifies the details of the comment.",
                        "**Values you are able to set**:",
                        "- `snippet.title`",
                        "- `snippet.description`",
                        "- `snippet.tags`",
                        "- `snippet.category_id`",
                        "- `snippet.default_language`",
                        "- `status.embeddable`",
                        "- `status.license`",
                        "- `status.public_stats_viewable`",
                        "- `status.publish_at`",
                        "- `status.self_declared_made_for_kids`",
                        "- `recording_details.recording_date`"
                    ],
                    "media_body: str": [
                        "The path to the file of the uploaded video."
                    ]
                },
                "**Optional** parameters": {
                    "notify_subscribers: bool": [
                        "Indicates whether YouTube should notify subscribers to the video's channel about the video."
                    ],
                    "on_behalf_of_content_owner: str": [
                        "Indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value."
                    ]
                },
                "return": "VideoResource",
                "ref": "https://developers.google.com/youtube/v3/docs/videos/insert"
            },
            "update": {
                "def": "Updates a video's metadata.",
                "**Required** parameters": {
                    "part: VideoPartType": [
                        "Identifies the attributes the method will set, and the attributes included in the response."
                    ],
                    "body: VideoResource": [
                        "The [`VideoResource`](#videoresource) which specifies the details of the video.",
                        "**Values you are able to set**:",
                        "- `id` (Required)",
                        "- `snippet.title (Required IF updating the `snippet` attribute.)`",
                        "- `snippet.description`",
                        "- `snippet.tags`",
                        "- `snippet.category_id`",
                        "- `snippet.default_language`",
                        "- `status.embeddable`",
                        "- `status.license`",
                        "- `status.public_stats_viewable`",
                        "- `status.publish_at`",
                        "- `status.self_declared_made_for_kids`",
                        "- `recording_details.recording_date`"
                    ]
                },
                "**Optional** parameters": {
                    "on_behalf_of_content_owner: str": [
                        "Indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value."
                    ]
                },
                "return": "VideoResource",
                "ref": "https://developers.google.com/youtube/v3/docs/videos/update"
            },
            "delete": {
                "def": "Deletes a video.",
                "**Required** parameters": {
                    "video_id: str": [
                        "The ID of the Video that will be deleted."
                    ]
                },
                "**Optional** parameters": {
                    "on_behalf_of_content_owner: str": [
                        "Indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value."
                    ]
                },
                "ref": "https://developers.google.com/youtube/v3/docs/videos/delete"
            },
            "rate": {
                "def": "Rate a video.",
                "**Required** parameters": {
                    "video_id: str": [
                        "The ID of the Video to rate."
                    ],
                    "rating: Literal['dislike', 'like', 'none']": [
                        "The rating to give to the video."
                    ]
                },
                "ref": "https://developers.google.com/youtube/v3/docs/videos/rate"
            },
            "get_rating": {
                "def": "Get a video's rating.",
                "**Required** parameters": {
                    "video_id: str": [
                        "The ID of the Video whose rating shall be retrieved."
                    ],
                    "on_behalf_of_content_owner: str": [
                        "Indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value."
                    ]
                },
                "ref": "https://developers.google.com/youtube/v3/docs/videos/getrating"
            }
        },
        "Channel": {
            "list": {
                "def": "Retrieve a channel/list of channel resources.",
                "**Required** parameters": {
                    "part: ChannelPartType": [
                        "Specifies what properties will be returned by the request."
                    ]
                },
                "**Filters** (specify exactly one)": {
                    "mine: bool": [
                        "Specifies that the API should retrieve the channel of the authorised user."
                    ],
                    "for_username: str": [
                        "Specifies the name of the channel that should retrieve."
                    ],
                    "id: str|list[str]": [
                        "The ID of the channel to be retrieved."
                    ],
                    "managed_by_me: bool": [
                        "Specifies that the API should retrieve channels managed by the authenticated user."
                    ]
                },
                "**Optional** parameters": {
                    "max_results: int": [
                        "The maximum amount of items that will be returned."
                    ],
                    "page_token: str": [
                        "Identifies a specific page in the result set that should be returned. The `next_page_token` and `prev_page_token` are available in the returned list response for this parameter."
                    ],
                    "on_behalf_of_content_owner: str": [
                        "Indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value."
                    ]
                },
                "ref": "https://developers.google.com/youtube/v3/docs/channels/list"
            },
            "update": {
                "def": "Updates a channel.",
                "**Required** parameters": {
                    "body: ChannelResource": [
                        "The [`ChannelResource`](#channelresource) which specifies the details of the channel.",
                        "**Values you are able to set**:",
                        "- `branding_settings.channel.description`",
                        "- `branding_settings.channel.country`",
                        "- `branding_settings.channel.default_language`",
                        "- `branding_settings.channel.keywords`",
                        "- `branding_settings.channel.moderate_comments`",
                        "- `branding_settings.channel.tracking_analytics_account_id`",
                        "- `branding_settings.channel.unsubscribed_trailer`",
                        "- `status.self_declared_made_for_kids`"
                    ],
                    "part: ChannelPartType": [
                        "Identifies the attributes the method will set, and the attributes included in the response."
                    ]
                },
                "**Optional** parameters": {
                    "on_behalf_of_content_owner: str": [
                        "Indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value."
                    ]
                },
                "return": "ChannelResource",
                "ref": "https://developers.google.com/youtube/v3/docs/channels/update"
            }
        },
        "ChannelSection": {
            "list": {
                "def": "Retrieve a list of channel sections.",
                "**Required** parameters": {
                    "part: ChannelSectionPartType": [
                        "Specifies what properties will be returned by the request."
                    ]
                },
                "**Filters** (specify exactly one)": {
                    "channel_id: str": [
                        "Specifies a channel ID whose channel sections will be returned."
                    ],
                    "id: str": [
                        "The ID of the sections that should be retrieved."
                    ],
                    "mine: bool": [
                        "Specifies that the API should retrieve the channel section of the authorised user."
                    ]
                },
                "**Optional** parameters": {
                    "on_behalf_of_content_owner: str": [
                        "Indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value."
                    ]
                },
                "ref": "https://developers.google.com/youtube/v3/docs/channelSections/list"
            },
            "insert": {
                "def": "Adds a channel section to the autheticated user's channel.",
                "**Required** parameters": {
                    "part: ChannelSectionPartType": [
                        "Identifies the attributes the method will set, and the attributes included in the response."
                    ],
                    "body: ChannelResource": [
                        "The [`ChannelSectionResource`](#channelsectionresource) which specifies the details of the channel.",
                        "**Values you are able to set**:",
                        "- `id`",
                        "- `snippet.type`",
                        "- `snippet.title`",
                        "- `snippet.position`",
                        "- `content_details.playlists`",
                        "- `content_details.channels`"
                    ]
                },
                "**Optional** parameters": {
                    "on_behalf_of_content_owner: str": [
                        "Indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value."
                    ],
                    "on_behalf_of_content_owner_channel: str": [
                        "Specifies the YouTube channel ID of the channel to which a video is being added."
                    ]
                },
                "return": "ChannelSectionResource",
                "ref": "https://developers.google.com/youtube/v3/docs/channelSections/insert"
            },
            "update": {
                "def": "Updates a channel section.",
                "**Required** parameters": {
                    "part: ChannelSectionPartType": [
                        "Identifies the attributes the method will set, and the attributes included in the response."
                    ],
                    "body: ChannelResource": [
                        "The [`ChannelSectionResource`](#channelsectionresource) which specifies the details of the channel.",
                        "**Values you are able to set**:",
                        "- `id`",
                        "- `snippet.type`",
                        "- `snippet.title`",
                        "- `snippet.position`",
                        "- `content_details.playlists`",
                        "- `content_details.channels`"
                    ]
                },
                "**Optional** parameters": {
                    "on_behalf_of_content_owner: str": [
                        "Indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value."
                    ]
                },
                "return": "ChannelSectionResource",
                "ref": "https://developers.google.com/youtube/v3/docs/channelSections/update"
            },
            "delete": {
                "def": "Deletes a channel section.",
                "**Required** parameters": {
                    "section_id: str": [
                        "The ID of the channel section that will be deleted."
                    ]
                },
                "**Optional** parameters": {
                    "on_behalf_of_content_owner: str": [
                        "Indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value."
                    ]
                },
                "ref": "https://developers.google.com/youtube/v3/docs/channelSections/delete"
            }
        },
        "Subscription": {
            "list": {
                "def": "Retrieve subscription resources.",
                "**Required** parameters": {
                    "part: SubscriptionPartType": [
                        "Specifies what properties will be returned by the request."
                    ]
                },
                "**Filters** (specify exactly one)": {
                    "channel_id: str": [
                        "Specifies a channel ID whose subscriptions will be returned."
                    ],
                    "id: str|list[str]": [
                        "The ID of the channel to be retrieved."
                    ],
                    "mine: bool": [
                        "Specifies that the API should retrieve the subscriptions of the authorised user."
                    ],
                    "my_recent_subscribers: bool": [
                        "Retrieve a feed of the subscribers of the authenticated user in reverse chronological order."
                    ],
                    "my_subscribers: bool": [
                        "Retrieve a feed of the subscribers of the authenticated user in no particular order"
                    ]
                },
                "**Optional** parameters": {
                    "order: Literal['alphabetical', 'relevance', 'unread']": [
                        "Specifies the method that will be used to sort resources in the response."
                    ],
                    "for_channel_id: str": [
                        "Specifies a list of channel IDs, which the APi will only match to."
                    ],
                    "max_results: int": [
                        "The maximum amount of items that will be returned."
                    ],
                    "page_token: str": [
                        "Identifies a specific page in the result set that should be returned. The `next_page_token` and `prev_page_token` are available in the returned list response for this parameter."
                    ],
                    "on_behalf_of_content_owner: str": [
                        "Indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value."
                    ],
                    "on_behalf_of_content_owner_channel: str": [
                        "Specifies the YouTube channel ID of the channel to which a video is being added."
                    ]
                },
                "ref": "https://developers.google.com/youtube/v3/docs/subscriptions/list"
            },
            "insert": {
                "def": "Subscribe to a channel.",
                "**Required** parameters": {
                    "channel_id: str": ["Specifies a channel ID to subscribe to."],
                    "part: SubscriptionPartType": ["Identifies the attributes the method will set, and the attributes included in the response."]
                },
                "return": "SubscriptionResource",
                "ref": "https://developers.google.com/youtube/v3/docs/subscriptions/insert"
            },
            "delete": {
                "def": "Deletes a subscription.",
                "**Required** parameters": {
                    "subscription_id: str": [
                        "The ID of the subscription that will be deleted."
                    ]
                },
                "ref": "https://developers.google.com/youtube/v3/docs/subscriptions/delete"
            }
        },
        "Search": {},
        "I18n": {}
    },
    "resources": {
        "PlaylistResource": {},
        "PlaylistItemResource": {},
        "ThumbnailResource": {},
        "CommentResource": {},
        "CommentThreadResource": {},
        "I18nResource": {},
        "VideoCategoryResource": {},
        "VideoAbuseReportReasonResource": {},
        "VideoResource": {},
        "ChannelResource": {},
        "ChannelSectionResource": {},
        "SearchResult": {},
        "SubscriptionResource": {}
    }
}